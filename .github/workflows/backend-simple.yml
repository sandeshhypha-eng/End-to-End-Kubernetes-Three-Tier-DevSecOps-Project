name: Backend - Simple CI

on:
  push:
    paths:
      - 'Application-Code/backend/**'
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Optional image tag to push (defaults to commit sha)'
        required: false
        default: ''

jobs:
  sonar:
    name: Sonar scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'

      - name: Install SonarScanner CLI
        run: |
          curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.1.3023-linux.zip
          unzip sonar-scanner.zip
          sudo mv sonar-scanner-4.8.1.3023-linux /opt/sonar-scanner
          export PATH=$PATH:/opt/sonar-scanner/bin
          sonar-scanner --version

      - name: Run SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          if [ -n "${SONAR_TOKEN:-}" ]; then
            /opt/sonar-scanner/bin/sonar-scanner \
              -Dsonar.projectKey=${{ github.repository }} \
              -Dsonar.sources=Application-Code/backend \
              -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
              -Dsonar.login=${SONAR_TOKEN}
          else
            echo "SONAR_TOKEN not set — skipping Sonar scan"

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          cd Application-Code/backend
          if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
            echo "Lockfile found, running 'npm ci'"
            npm ci
          else
            echo "No lockfile found, running 'npm install' and generating package-lock.json if needed"
            npm install
          fi

      - name: Run tests (if present)
        run: |
          cd Application-Code/backend
          if [ -f package.json ] && npm test --silent; then echo "tests ran"; else echo "no tests or tests failed"; fi

  docker:
    name: Build, scan and push image
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Set IMAGE_TAG
        run: |
          if [ -n "${{ github.event.inputs.image_tag }}" ]; then
            echo "IMAGE_TAG=${{ github.event.inputs.image_tag }}" >> $GITHUB_ENV
          else
            echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV

      - name: Build Docker image
        run: |
          docker build -t backend:${{ env.IMAGE_TAG }} Application-Code/backend

      - name: Scan image with Trivy
        run: |
          IMAGE=backend:${{ env.IMAGE_TAG }}
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image --severity HIGH,CRITICAL --exit-code 1 "$IMAGE" || true

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Tag and push image to Docker Hub
        run: |
          IMAGE=backend:${{ env.IMAGE_TAG }}
          REPO=${{ secrets.DOCKERHUB_USERNAME }}/backend
          docker tag "$IMAGE" "$REPO:${{ env.IMAGE_TAG }}"
          docker tag "$IMAGE" "$REPO:latest"
          docker push "$REPO:${{ env.IMAGE_TAG }}"
          docker push "$REPO:latest"

  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.27.3'

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --name dev --region ap-south-1

      - name: Ensure namespace exists
        run: |
          kubectl get namespace three-tier >/dev/null 2>&1 || kubectl create namespace three-tier

      - name: Set kubectl context namespace
        run: |
          kubectl config set-context --current --namespace=three-tier

      - name: Deploy backend manifests
        run: |
          if [ -n "${{ github.event.inputs.image_tag }}" ]; then
            IMAGE_TAG="${{ github.event.inputs.image_tag }}"
          else
            IMAGE_TAG="${{ github.sha }}"
          fi

          IMAGE_REPO="${{ secrets.DOCKERHUB_USERNAME }}/backend"
          IMAGE="${IMAGE_REPO}:${IMAGE_TAG}"

          echo "Applying deployment and service manifests"
          kubectl apply -f Kubernetes-Manifests-file/Backend/secrets.yaml
          kubectl apply -f Kubernetes-Manifests-file/Backend/db-ca.yaml
          kubectl apply -f Kubernetes-Manifests-file/Backend/deployment.yaml
          kubectl apply -f Kubernetes-Manifests-file/Backend/service.yaml

          echo "Updating deployment 'api' image to ${IMAGE}"
          if kubectl -n three-tier set image deployment/api api="${IMAGE}"; then
            echo "✅ kubectl set image succeeded"
          else
            echo "⚠️ kubectl set image failed; attempting kubectl patch fallback"
            kubectl -n three-tier patch deployment api -p "{\"spec\":{\"template\":{\"spec\":{\"containers\":[{\"name\":\"api\",\"image\":\"${IMAGE}\"}]}}}}"
          fi

          echo "Waiting for rollout to complete"
          kubectl -n three-tier rollout status deployment/api --timeout=5m
